#!/bin/sh

set -u

usage () {
    cat <<'EOF'
usage: $0 -l device list file
          [-p path/to/switchbot.py] [-d backup source] [-r retry count]

 -l: specify file path for device list

 -p: file path to switchbot.py script
     default is '/opt/munin/tools/switchbot.py'

 -d: directory path to save result
     default is '/run/switchbot'

 -r: retry count of each retrieval for SwtichBot sensor data
     default is 3

EOF
}

if [ $# -eq 0 ]; then
    usage
    exit 1
fi

warn () {
    >&2 echo "$0: $@"
}

isexist () {
    [ -e "$1" ] && return 0
    warn "$1 does not exist"
    exit 1
}


# parse commandline arguments
while getopts "l:p:d:r:" OPT; do
    case $OPT in
        l)  LISTPATH="$OPTARG"
            isexist "$LISTPATH"
            ;;
        p)  SBSCRIPT="$OPTARG"
            isexist "$SBSCRIPT"
            ;;
        d)  DATADIR="$OPTARG"
            ;;
        r)  RETRY="$OPTARG"
            ;;
    esac
done
shift $(( $OPTIND - 1 ))


# check configuration and set default
checkvar () {
    unset _checkvar
    set +u
    eval "_checkvar=\$$1"
    set -u
    if [ -z "$_checkvar" ]; then
        if [ $# -eq 2 ]; then
            eval "$1=\"$2\""
        else
            warn "$1 is need to be set"
            exit 1
        fi
    fi
}


# check configrations and set default value if not yet
checkvar SBSCRIPT "/opt/munin/tools/switchbot.py"
checkvar DATADIR "/run/switchbot"
checkvar RETRY "3"


# Retry given command on failure
retry() {
    max_retry="$1"; shift
    command="$@"

    exec_count=0
    until $command
    do
        exec_count=$(( exec_count + 1 ))
        if [ $exec_count -ge $max_retry ]; then
            warn "failed to exec '$command', reached to max retry ($max_retry)"
            return 1
        fi
    done
}


# read sensor device list from DEVICES and execute swtichbot.py for each device
ret=0
while IFS='' read -r line || [[ -n "$line" ]]
do
    device=$(echo "$line" | cut -d' ' -f1)
    retry $RETRY $SBSCRIPT $device $DATADIR

    # check each return code to final result
    __ret=$?
    if [ $__ret -ne 0 ]; then
        ret=$__ret
    fi
done < $LISTPATH


if [ $ret -ne 0 ]; then
    warn "something wrong on execution"
    exit $ret
fi
