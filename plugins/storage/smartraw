#!/usr/bin/perl

# smartraw - MMunin multigraph plugin to monitor raw S.M.A.R.T. values,
# from storage devices with smartctl command
#
# Copyright (C) 2019 Ken-ichi Mito

=head1 NAME

smartraw - MMunin multigraph plugin to monitor raw S.M.A.R.T. values,
from storage devices with smartctl command

=head1 APPLICABLE SYSTEMS

Linux system with smartmontools installed.

=head1 CONFIGURATION

This plugin needs root privilege to fetch S.M.A.R.T. values.

    [smartraw]
        user root
        env.devices sda sdb

smartctl: path to smartctl program (default: /usr/sbin/smartctl)
nvme_cli: path to nvme program (default: /usr/bin/nvme)
devices: list of devices to monitor

=head2 DEBUG

This plugin does not use MUNIN_DEBUG environment variable,
but for debugging usage, setting env.debug to 1 outputs more verbose messages to stderr.

=head1 INTERPRETATION

This plugin fetches specific S.M.A.R.T. values and make line graphs.
Some values will be multiplied, because original values are a little confusing.

=head1 non NVMe devices

This plugin uses smartctl (smartmontools) for non NVMe devices.

=head2 Attributes

Most normal devices give 5, 9, 12, 192, 196, 197, 198
PLEXTOR PX-G128M6e also gives 177, 241 and 242
Seagate Barracuda ST4000DM004-2CV104 also gives 241 and 242
SanDisk SDCZ80-016G (SanDisk SSD U100 16GB) gives 241 and 242
INTEL SSDSC2KW512G8 gives 241, 242 and 249

  5: Reallocated Sectors Count
  9: Power-On Hours
 12: Power Cycle Count
192: Power-off Retract Count
196: Reallocation Event Count
197: Current Pending Sector Count
198: Offline Uncorrectable Sector Count
173: SSD Wear Leveling Count
174: Unexpected power loss count
177: Wear Range Delta
241: Total LBAs Written
242: Total LBAs Read
249: NAND Writes (1GiB)

=head2 Modifying value of attributes

PLEXTOR PX-G128M6e
    241: Total_LBAs_Written  => RAW_VALUE * 32 (MiB)
    242: Total_LBAs_Read => RAW_VALUE * 32 (MiB)

Seagate Barracuda ST4000DM004-2CV104, SanDisk SDCZ80-016G and INTEL SSDSC2KW512G8
    241: Total_LBAs_Written  => RAW_VALUE * 512 (Bytes)
    242: Total_LBAs_Read => RAW_VALUE * 512 (Bytes)

INTEL SSDSC2KW512G8
    249: NAND Writes (1GiB) => RAW_VALUE (GiB)

All Devices
    convert 9: Power-On Hours to days ( 1/24 )

=head1 NVMe devices

This plugin uses nvme (nvme-cli) for NVMe devices.

=head2 Fields

NVMe devices have many fields that are explained in Specifications.
See https://nvmexpress.org/resources/specifications/ for more details.

This plugin based on NVM Express 1.3d and NVM Express 1.4.

=head2 Modifying value of fields

'Available Spare Threshold' is threshold value, so ignored.
'Data Units Read' and 'Data Units Written' are multiplied by 512 * 1000.
'Power On Hours' is converted to `days` unit.

=head1 MAGIC MARKERS

 #%# family=manual
 #%# capabilities=multigraph

=head1 AUTHOR

Ken-ichi Mito

=head1 LICENSE

2-clause BSD License

=cut

use strict;
use warnings;
use Carp;
use utf8;

use Munin::Plugin;

my $DEBUG = defined $ENV{'debug'} ? $ENV{'debug'} : 0;
my $plugin_name = $Munin::Plugin::me;

# hardcoded constants used to filter/modify raw values
my $SMART_VALUE_MODIFIER = [
    {
        info => {
            device_model => 'PLEXTOR PX-G128M6e',
        },
        value => {
            id5 => 1,
            id9 => 1 / 24,    # hours to days
            id12 => 1,
            id192 => 1,
            id196 => 1,
            id198 => 1,
            id177 => 1,
            id241 => 32 * 1024 * 1024,
            id242 => 32 * 1024 * 1024,
        },
    },
    {
        info => {
            device_model => 'ST4000DM004-2CV104',
            serial_number => 'WFN0HKE5',
            # device on shizuku gives weird values on *Hours attributes
        },
        value => {
            id5 => 1,
            id12 => 1,
            id192 => 1,
            id197 => 1,
            id198 => 1,
            id241 => 512,
            id242 => 512,
        },
    },
    {
        info => {
            device_model => 'ST4000DM004-2CV104',
        },
        value => {
            id5 => 1,
            id9 => 1 / 24,    # hours to days
            id12 => 1,
            id192 => 1,
            id197 => 1,
            id198 => 1,
            id241 => 512,
            id242 => 512,
        },
    },
    {
        info => {
            device_model => 'SanDisk SSD U100 16GB',
        },
        value => {
            id5 => 1,
            id9 => 1 / 24,    # hours to days
            id12 => 1,
            id173 => 1,
            id174 => 1,
            id241 => 512,
            id242 => 512,
        },
    },
    {
        info => {
            device_model => 'INTEL SSDSC2KW512G8',
        },
        value => {
            id5 => 1,
            id9 => 1 / 24,    # hours to days
            id12 => 1,
            id192 => 1,
            id241 => 32 * 1024 * 1024,
            id242 => 32 * 1024 * 1024,
            id249 => 1024 * 1024 * 1024,
        },
    },
    {
        # most devices including NVMe come here (default modifier)
        # all S.M.A.R.T. IDs used in above devices need to be listed below
        value => {
            id5 => 1,
            id9 => 1 / 24,    # hours to days
            id12 => 1,
            id192 => 1,
            id196 => 1,
            id197 => 1,
            id198 => 1,
            id173 => 1,
            id174 => 1,
            id177 => 1,
            id241 => undef,
            id242 => undef,
            id249 => undef,

            # NVMe smart-log modifier
            b000    => 1,               # critical_warning
            b001    => 1,               # temperature
            b003    => 1,               # available_spare
            b004    => undef,           # available_spare_threshold
            b005    => 1,               # percentage_used
            b032    => 512 * 1000,      # data_units_read
            b048    => 512 * 1000,      # data_units_written
            b064    => 1,               # host_read_commands
            b080    => 1,               # host_write_commands
            b096    => 1,               # controller_busy_time
            b112    => 1,               # power_cycles
            b128    => 1 / 24,          # power_on_hours (convert hours to days)
            b144    => 1,               # unsafe_shutdowns
            b160    => 1,               # media_errors
            b176    => 1,               # num_err_log_entries
            b192    => 1,               # Warning Temperature Time
            b196    => 1,               # Critical Composite Temperature Time
            b200    => 1,               # Temperature Sensor 1
            b202    => 1,               # Temperature Sensor 2
            b216    => 1,               # Thermal Management T1 Trans Count
            b220    => 1,               # Thermal Management T2 Trans Count
            b224    => 1,               # Thermal Management T1 Total Time
            b228    => 1,               # Thermal Management T2 Total Time
        },
    },
];

# convert field name of 'nvme smart-log' to byte index
my $NVME_FIELD2BYTE = {
    'critical_warning'                      => 'b000',
    'temperature'                           => 'b001',
    'available_spare'                       => 'b003',
    'available_spare_threshold'             => 'b004',
    'percentage_used'                       => 'b005',
    'data_units_read'                       => 'b032',
    'data_units_written'                    => 'b048',
    'host_read_commands'                    => 'b064',
    'host_write_commands'                   => 'b080',
    'controller_busy_time'                  => 'b096',
    'power_cycles'                          => 'b112',
    'power_on_hours'                        => 'b128',
    'unsafe_shutdowns'                      => 'b144',
    'media_errors'                          => 'b160',
    'num_err_log_entries'                   => 'b176',
    'Warning Temperature Time'              => 'b192',
    'Critical Composite Temperature Time'   => 'b196',
    'Temperature Sensor 1'                  => 'b200',
    'Temperature Sensor 2'                  => 'b202',
    'Thermal Management T1 Trans Count'     => 'b216',
    'Thermal Management T2 Trans Count'     => 'b220',
    'Thermal Management T1 Total Time'      => 'b224',
    'Thermal Management T2 Total Time'      => 'b228',
};

# hardcoded constants used to print config messages
my $CONFIG_MESSAGE = {
    id5 => {
        title_of_value => 'Reallocated Sectors Count',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    id9 => {
        title_of_value => 'Power-On Hours [into days]',
        graph_args => '--base 1000',
        graph_vlabel => 'days',
    },
    id12 => {
        title_of_value => 'Power Cycle Count',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    id192 => {
        title_of_value => 'Power-off Retract Count',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    id196 => {
        title_of_value => 'Reallocation Event Count',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    id197 => {
        title_of_value => 'Current Pending Sector Count',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    id198 => {
        title_of_value => 'Offline Uncorrectable Sector Count',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    id173 => {
        title_of_value => 'SSD Wear Leveling Count',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    id174 => {
        title_of_value => 'Unexpected power loss count',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    id177 => {
        title_of_value => 'Wear Range Delta',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    id241 => {
        title_of_value => 'Total LBAs Written',
        graph_args => '--base 1024',
        graph_vlabel => 'bytes',
    },
    id242 => {
        title_of_value => 'Total LBAs Read',
        graph_args => '--base 1024',
        graph_vlabel => 'bytes',
    },
    id249 => {
        title_of_value => 'NAND Writes',
        graph_args => '--base 1024',
        graph_vlabel => 'bytes',
    },

    # NVMe devices
    b000 => {
        title_of_value => 'Critical Warning',
        graph_args => '--base 1000',
        graph_vlabel => 'value',
    },
    b001 => {
        title_of_value => 'Composite Temperature',
        graph_args => '--base 1000',
        graph_vlabel => 'degrees Celsius',
    },
    b003 => {
        title_of_value => 'Available Spare',
        graph_args => '--base 1000 --lower-limit 0 --upper-limit 100',
        graph_vlabel => '% remaining',
    },
    b004 => {   # this field will not be used
        title_of_value => 'Available Spare Threshold',
        graph_args => '--base 1000 --lower-limit 0 --upper-limit 100',
        graph_vlabel => '%',
    },
    b005 => {
        title_of_value => 'Percentage Used',
        graph_args => '--base 1000 --lower-limit 0 --upper-limit 100',
        graph_vlabel => '% used',
    },
    b032 => {
        title_of_value => 'Data Units Read',
        graph_args => '--base 1024',
        graph_vlabel => 'bytes',
    },
    b048 => {
        title_of_value => 'Data Units Written',
        graph_args => '--base 1024',
        graph_vlabel => 'bytes',
    },
    b064 => {
        title_of_value => 'Host Read Commands',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    b080 => {
        title_of_value => 'Host Write Commands',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    b096 => {
        title_of_value => 'Controller Busy Time',
        graph_args => '--base 1000',
        graph_vlabel => 'minutes',
    },
    b112 => {
        title_of_value => 'Power Cycles',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    b128 => {
        title_of_value => 'Power On Hours [into days]',
        graph_args => '--base 1000',
        graph_vlabel => 'days',
    },
    b144 => {
        title_of_value => 'Unsafe Shutdowns',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
    },
    b160 => {
        title_of_value => 'Media Errors',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
        graph_info => 'Media and Data Integrity Errors',
    },
    b176 => {
        title_of_value => 'Num Err Log Entries',
        graph_args => '--base 1000',
        graph_vlabel => 'entries',
        graph_info => 'Number of Error Information Log Entries',
    },
    b192 => {
        title_of_value => 'Warning Comp Temp Time',
        graph_args => '--base 1000',
        graph_vlabel => 'minutes',
        graph_info => 'Warning Composite Temperature Time',
    },
    b196 => {
        title_of_value => 'Critical Comp Temp Time',
        graph_args => '--base 1000',
        graph_vlabel => 'minutes',
        graph_info => 'Critical Composite Temperature Time',
    },
    b200 => {
        title_of_value => 'Temperature Sensor 1',
        graph_args => '--base 1000',
        graph_vlabel => 'degrees Celsius',
    },
    b202 => {
        title_of_value => 'Temperature Sensor 2',
        graph_args => '--base 1000',
        graph_vlabel => 'degrees Celsius',
    },
    b216 => {
        title_of_value => 'Thermal Temp 1 Trans Count',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
        graph_info => 'Thermal Management Temperature 1 Transition Count',
    },
    b220 => {
        title_of_value => 'Thermal Temp 2 Trans Count',
        graph_args => '--base 1000',
        graph_vlabel => 'counts',
        graph_info => 'Thermal Management Temperature 2 Transition Count',
    },
    b224 => {
        title_of_value => 'Thermal Temp 1 Total Time',
        graph_args => '--base 1000',
        graph_vlabel => 'seconds',
        graph_info => 'Total Time For Thermal Management Temperature 1',
    },
    b228 => {
        title_of_value => 'Thermal Temp 2 Total Time',
        graph_args => '--base 1000',
        graph_vlabel => 'seconds',
        graph_info => 'Total Time For Thermal Management Temperature 2',
    },
};

if ($<) {
    croak "this plugin need 'root' privilege to run";
}

# check current environment supports multigraph plugins
need_multigraph();

# say 'no' for autoconf
if ($ARGV[0] and $ARGV[0] eq 'autoconf') {
    print "no (you should setup manually this plugin\n";
    exit 0;
}

# list up block devices
my @devices;
if (exists $ENV{'devices'}) {
    @devices = split(' ', $ENV{'devices'});
}
else {
    opendir(DEV, '/dev/') or croak "Failed to open '/dev/' directory: $!";
    @devices = grep {/\A(hd[a-z]|sd[a-z]|nvme[0-9]+n[0-9]+)\z/} readdir(DEV);
    closedir(DEV);
}

# fetch current S.M.A.R.T. values
my $device_values = load_device_values(@devices);

# filter/modify raw device_values
if ($device_values) {
    $device_values = modify_smart_values($device_values);
}

# dummy output for test

if ($ARGV[0] and $ARGV[0] eq 'config') {
    print_config($device_values);
    exit 0;
}

print_graphs($device_values);

# end of plugin execution
exit 0;


# load_device_values
#
# load current S.M.A.R.T. values by using smartctl command

sub load_device_values {
    my @devices = @_;
    my $device_values;

    foreach my $device (@devices) {
        my $devicepath = '/dev/' . $device;
        my $info;
        my $value;
        if ($device =~ /\Anvme/) {
            my $nvme_id_ctrl  = read_nvme('id-ctrl' => $devicepath);
            my $nvme_smart_log = read_nvme('smart-log' => $devicepath);

            $info  = parse_nvme_id_ctrl($nvme_id_ctrl);
            $value = parse_nvme_smart_log($nvme_smart_log);
        }
        else {
            my $raw_smart_log = read_smart($devicepath);

            $info  = parse_smart_info($raw_smart_log);
            $value = parse_smart_data($raw_smart_log);
        }

        if ($info and $value) {
            $device_values->{$device} = {
                info => $info,
                value => $value,
            }
        }
    }

    return $device_values;
}

# exec smartctl and read its output
sub read_smart {
    my $devicepath = shift;

    my $command = exists $ENV{'smartctl'} ? $ENV{'smartctl'} : '/usr/sbin/smartctl';
    open my $stdout, '-|', $command, '-A', '-i', $devicepath
        or croak "Failed to exec $command -A -i $devicepath: $!";

    my @results = <$stdout>;
    chomp @results;
    return \@results;
}

# parse INFORMATION SECTION
sub parse_smart_info {
    my $logs = shift;

    my ($model, $serial);

    my $inside_section = 0;
    foreach my $line (@$logs) {
        if (! $inside_section) {
            #skip until '=== START OF INFORMATION SECTION ==='
            if ($line =~ /START OF INFORMATION SECTION/) {
                $inside_section = 1;
            }
            next;
        }
        else {
            if ($line =~ /\ADevice Model:\s+(.+)/) {
                $model = $1;
            }
            if ($line =~ /\ADevice:\s+(.+)/) {
                $model = $1;
            }
            if ($line =~ /\ASerial Number:\s+(.+)/) {
                $serial = $1;
            }
        }
    }

    if ($model and $serial) {
        return {
            device_model => $model,
            serial_number => $serial,
        }
    }
    else {
        return undef;
    }
}

# parse SMART DATA SECTION
sub parse_smart_data {
    my $logs = shift;

    my $data;

    my $inside_section = 0;
    foreach my $line (@$logs) {
        if (! $inside_section) {
            #skip until '=== START OF READ SMART DATA SECTION ==='
            if ($line =~ /START OF READ SMART DATA SECTION/) {
                $inside_section = 1;
            }
            next;
        }
        else {
            if ($line =~ /\A\s*\d+\s+(\S+\s+){8}/) {
                $line =~ s/\A\s+|\s+\z//g;    # trim leading and trailing white spaces
                my @elem = split(/\s+/, $line);
                $data->{'id' . $elem[0]} = $elem[9];
            }
        }
    }

    return $data;
}


# exec nvme command and read its output
sub read_nvme {
    use POSIX qw(setlocale LC_NUMERIC);

    my $subcommand = shift;
    my $devicepath = shift;

    # nvme-cli uses ' flag character in printf(),
    # so the actual thousands' grouping character used depentds on LC_NUMERIC
    # Save original LC_NUMERIC and change it to POSIX locale not to use any grouping character
    my $old_locale = setlocale(LC_NUMERIC);
    setlocale(LC_NUMERIC, 'C')
        or carp "Failed to change LC_NUMERIC to POSIX";

    my $command = exists $ENV{'nvme_cli'} ? $ENV{'nvme_cli'} : '/usr/bin/nvme';
    open my $stdout, '-|', $command, $subcommand, $devicepath
        or croak "Failed to exec $command $subcommand $devicepath: $!";

    # restore orignal LC_NUMERIC
    setlocale(LC_NUMERIC, $old_locale)
        or carp "Failed to change LC_NUMERIC original '$old_locale'";

    my @results = <$stdout>;
    chomp @results;
    return \@results;
}

# parse nvme id-ctrl
sub parse_nvme_id_ctrl {
    my $logs = shift;

    my ($model, $serial);

    foreach my $line (@$logs) {
        if ($line =~ /\Amn\s+:\s(.+)/) {
            $model = $1;
        }
        if ($line =~ /\Asn\s+:\s(.+)/) {
            $serial = $1;
        }
    }

    if ($model and $serial) {
        return {
            device_model => $model,
            serial_number => $serial,
        }
    }
    else {
        return undef;
    }
}

# parse nvme smart-log
sub parse_nvme_smart_log {
    my $logs = shift;

    my $data;

    foreach my $line (@$logs) {
        if ($line =~ /\A(.+)\s+:\s+([x0-9a-f]+)/) {
            my $field = $1;
            my $value = $2;

            # trim leading and trailing white spaces
            $field =~ s/\A\s+|\s+\z//g;
            $value =~ s/\A\s+|\s+\z//g;

            $data->{ $NVME_FIELD2BYTE->{$field} } = $value;
        }
    }

    return $data;
}


# modify_smart_values
#
# filter and modify raw smart values using $SMART_VALUE_MODIFIER constants

sub modify_smart_values {
    my $devices = shift;

    foreach my $devname (keys %$devices) {
        my $device = $devices->{$devname};
        foreach my $modifier (@$SMART_VALUE_MODIFIER) {
            if (exists $modifier->{'info'}) {
                # check weather device is 'special device'

                if (exists $modifier->{'info'}{'serial_number'}) {
                    # serial_number must be matched
                    if ($device->{'info'}{'serial_number'} ne
                        $modifier->{'info'}{'serial_number'}
                    ) { next; }
                }

                # device_model must be matched
                if ($device->{'info'}{'device_model'} ne
                    $modifier->{'info'}{'device_model'}
                ) { next; }
            }
            # else => device is normal device
            # ... or both serial_number and device_model are matched

            foreach my $index (keys %{$device->{'value'}}) {
                if ($modifier->{'value'}{$index}) {
                    $device->{'value'}{$index} *= $modifier->{'value'}{$index};
                }
                else {
                    delete $device->{'value'}{$index};
                }
            }

            # generate unique name to be used for munin data
            $device->{'normalized_sn'} = clean_fieldname($device->{'info'}{'serial_number'});

            # filter and modification must be done only once
            last;
        }
    }

    return $devices;
}

# print_config
#
# output config for root and deeeper graphs

sub print_config {
    my $device_values = shift;

    # config for root graphs
    print_root_config($device_values);

    # config for each device graph
    foreach my $device (sort keys %$device_values) {
        print_device_config($device => $device_values->{$device});
    }
}

# Print configration texts for the root graph
sub print_root_config {
    my $device_values = shift;

    # fetch value lists sorted with numerical order
    foreach my $index (sort keys %{$SMART_VALUE_MODIFIER->[-1]{'value'}}) {
        my @devices_have_value = map { $_ } grep { exists $device_values->{$_}{'value'}{$index} }
            keys %$device_values;
        if (! @devices_have_value) {
            # no device has S.M.A.R.T. value which key name is $index
            next;
        }
        my $message = $CONFIG_MESSAGE->{$index};
        print <<"EOF";
multigraph ${plugin_name}_${index}
graph_title $index: $message->{'title_of_value'} per device
graph_args $message->{'graph_args'}
graph_vlabel $message->{'graph_vlabel'}
graph_category smart
graph_info This graph shows the value of S.M.A.R.T. attribute/field $message->{'title_of_value'} ($index) for each devices.
EOF
        foreach my $device (sort keys %$device_values) {
            if (! exists $device_values->{$device}{'value'}{$index}) {
                next;
            }
            my $fieldname = "$device_values->{$device}{'normalized_sn'}_$index";
            print <<"EOF";
${fieldname}.label $device
${fieldname}.type GAUGE
${fieldname}.info $message->{'title_of_value'} ($index) of $device in $message->{'graph_vlabel'}
${fieldname}.min 0
EOF
        }
    }
}

# Print configration texts for each device graph
sub print_device_config {
    my $device = shift;
    my $device_values = shift;

    # fetch value lists sorted with numerical order
    foreach my $index (sort keys %{$SMART_VALUE_MODIFIER->[-1]{'value'}}) {
        if (! exists $device_values->{'value'}{$index}) {
            # this device does not have $index value
            next;
        }
        my $message = $CONFIG_MESSAGE->{$index};
        my $fieldname = "$index";
        print <<"EOF";
multigraph ${plugin_name}_${index}.$device_values->{'normalized_sn'}
graph_title $index: $message->{'title_of_value'} for $device
graph_args $message->{'graph_args'}
graph_vlabel $message->{'graph_vlabel'}
graph_category smart
graph_info This graph shows the value of S.M.A.R.T. attribute/field $message->{'title_of_value'} ($index) for $device (Model: $device_values->{'info'}{'device_model'}, S/N: $device_values->{'info'}{'serial_number'}).
${fieldname}.label $message->{'title_of_value'}
${fieldname}.type GAUGE
${fieldname}.info $message->{'title_of_value'} ($index) of $device in $message->{'graph_vlabel'}
${fieldname}.min 0
EOF
    }
}

# print_graphs
#
# output graph data for root and each devices

sub print_graphs {
    my $device_values = shift;

    # print root graphs
    print_root_graph($device_values);

    # print each device graph
    foreach my $device (sort keys %$device_values) {
        print_device_graph($device_values->{$device});
    }
}

# Print data for the root graph
sub print_root_graph {
    my $device_values = shift;

    foreach my $index (sort keys %{$SMART_VALUE_MODIFIER->[-1]{'value'}}) {
        my @devices_have_value = map { $_ } grep { exists $device_values->{$_}{'value'}{$index} }
            keys %$device_values;
        if (! @devices_have_value) {
            # no device has S.M.A.R.T. value which key name is $index
            next;
        }
        print <<"EOF";
multigraph ${plugin_name}_${index}
EOF
        foreach my $device (sort keys %$device_values) {
            if (! exists $device_values->{$device}{'value'}{$index}) {
                next;
            }
            my $fieldname = "$device_values->{$device}{'normalized_sn'}_$index";
        print <<"EOF";
${fieldname}.value $device_values->{$device}{'value'}{$index}
EOF
        }
    }
}

# Print data for each device graph
sub print_device_graph {
    my $device_values = shift;

    foreach my $index (sort keys %{$SMART_VALUE_MODIFIER->[-1]{'value'}}) {
        if (! exists $device_values->{'value'}{$index}) {
            next;
        }
        my $fieldname = "$index";
        print <<"EOF";
multigraph ${plugin_name}_${index}.$device_values->{'normalized_sn'}
${fieldname}.value $device_values->{'value'}{$index}
EOF
    }
}
